## Version 2025/08/20
# Generated by SWAG MCP Server
# MCP Streamable-HTTP Subfolder Configuration
# Service: {{ service_name }}
# Upstream: {{ upstream_proto }}://{{ upstream_app }}:{{ upstream_port }}

location /{{ service_name }} {
    return 301 $scheme://$host/{{ service_name }}/;
}

# MCP Streamable-HTTP Subfolder Configuration
location ^~ /{{ service_name }}/ {
{% if auth_method != "none" %}
    # enable for {{ auth_method }} (requires {{ auth_method }}-server.conf in the server block)
    include /config/nginx/{{ auth_method }}-location.conf;
{% endif %}

    # Security headers
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    include /config/nginx/resolver.conf;

    # MCP Server Configuration
    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    # Essential settings for MCP streamable-http transport
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_cache off;
    proxy_request_buffering off;
    proxy_max_temp_file_size 0;
    chunked_transfer_encoding on;

    # Connection management for SSE/streaming support
    proxy_set_header Connection '';

    # Cache control headers for streaming responses
    add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    add_header Pragma "no-cache" always;
    add_header Expires "0" always;

    # Standard reverse proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-Uri $request_uri;
    proxy_set_header X-Forwarded-Prefix /{{ service_name }};
    proxy_set_header X-Script-Name /{{ service_name }};

    # MCP-specific headers for session management and content negotiation
    proxy_set_header Accept $http_accept;
    proxy_set_header Mcp-Session-Id $http_mcp_session_id;

    # Timeouts for long-running MCP connections (24h read, 1h connect/send)
    proxy_connect_timeout 60s;
    proxy_send_timeout 86400s;
    proxy_read_timeout 86400s;

    # URL rewriting for subfolder â†’ root mapping
    # This removes the subfolder prefix when forwarding to the MCP server
    rewrite ^/{{ service_name }}/(.*) /$1 break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}

# OAuth discovery endpoints (no auth)
location = /{{ service_name }}/.well-known/oauth-authorization-server {
    include /config/nginx/resolver.conf;

    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Remove subfolder prefix for discovery endpoint
    rewrite ^/{{ service_name }}/\.well-known/oauth-authorization-server /.well-known/oauth-authorization-server break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}

location = /{{ service_name }}/.well-known/openid-configuration {
    include /config/nginx/resolver.conf;

    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Remove subfolder prefix for discovery endpoint
    rewrite ^/{{ service_name }}/\.well-known/openid-configuration /.well-known/openid-configuration break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}

# OAuth endpoints (no auth)
location = /{{ service_name }}/register {
    include /config/nginx/resolver.conf;

    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    rewrite ^/{{ service_name }}/register /register break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}

location = /{{ service_name }}/authorize {
    include /config/nginx/resolver.conf;

    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    rewrite ^/{{ service_name }}/authorize /authorize break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}

location = /{{ service_name }}/token {
    include /config/nginx/resolver.conf;

    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    rewrite ^/{{ service_name }}/token /token break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}

location = /{{ service_name }}/revoke {
    include /config/nginx/resolver.conf;

    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    rewrite ^/{{ service_name }}/revoke /revoke break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}

# OAuth callback and other auth-related paths (no auth)
location ^~ /{{ service_name }}/auth/ {
    include /config/nginx/resolver.conf;

    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Remove subfolder prefix for auth paths
    rewrite ^/{{ service_name }}/auth/(.*) /auth/$1 break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}

# Optional: Health check endpoint for your MCP server (no auth)
location ^~ /{{ service_name }}/health {
    include /config/nginx/resolver.conf;

    set $upstream_app "{{ upstream_app }}";
    set $upstream_port "{{ upstream_port }}";
    set $upstream_proto "{{ upstream_proto }}";

    # Basic headers for health checks
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Remove subfolder prefix for health endpoint
    rewrite ^/{{ service_name }}/health /health break;

    proxy_pass $upstream_proto://$upstream_app:$upstream_port;
}
